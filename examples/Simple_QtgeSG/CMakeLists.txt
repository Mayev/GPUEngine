cmake_minimum_required(VERSION 3.0)

set(PROJECT_NAME "Simple_QTgeSG")
set(APP_NAME "Simple_QTgeSG")

set( CMAKE_AUTORCC ON )
set( CMAKE_AUTOUIC ON )
set( CMAKE_AUTOMOC ON )

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY AUTOGEN_TARGETS_FOLDER "CMakeAutoGeneratedTargets")

SET(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "rd" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_MINSIZEREL_POSTFIX "s" CACHE STRING "add a postfix, usually empty on windows")

project(${PROJECT_NAME})
SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}")

find_package(Qt5 COMPONENTS Quick )
if(NOT TARGET geGL)
   find_package(GPUEngine COMPONENTS geGL)
endif()
find_package(AssimpModelLoader QUIET HINTS ${GPUEngine_SOURCE_DIR}/geAD/AssimpModelLoader/cmake)
find_package(QtImageLoader QUIET HINTS ${GPUEngine_SOURCE_DIR}/geAD/QtImageLoader/cmake)

# We need some special treatment here inside the GE build system. There are some libraries that the
# targets exports only when used via config. For example the geSG needs ste when compiled in aplication
# but not when compiled here as dll. The quickest solution is to find it manualy here. But rest asured
# when you would configure your cmake the the geSG config will bring the ste as external dependency.

if(NOT TARGET ste)
   find_package(ste QUIET)
endif()

if(NOT TARGET Qt5::Quick OR NOT TARGET geGL OR NOT TARGET geSG OR NOT TARGET AssimpModelLoader OR NOT TARGET QtImageLoader )
   return()
endif()

set(DEFAULT_RESOERCES_PATH "${CMAKE_CURRENT_LIST_DIR}/resources")

set(${APP_NAME}_RESOURCES "${DEFAULT_RESOERCES_PATH}" CACHE PATH "Relative or absolute path to Application resources.")

set(HEADER_PATH src)
set(SOURCE_PATH src)
get_filename_component(src_abs ${SOURCE_PATH} ABSOLUTE)

set(GLSG_FILES
   src/glsg/EnumToGL.h src/glsg/EnumToGL.cpp
   src/glsg/GLAttribute.h
   src/glsg/GLScene.h
   src/glsg/GLSceneProcessor.h src/glsg/GLSceneProcessor.cpp
)

source_group(glsg FILES ${GLSG_FILES})

set(SOURCE_FILES
   src/main.cpp
   src/QuickRendererBase.h src/QuickRendererBase.cpp
   src/SimplegeSGRenderer.h src/SimplegeSGRenderer.cpp
   src/SimpleVT.h src/SimpleVT.cpp
   #src/types.h
   src/VisualizationTechnique.h
)


add_executable(${APP_NAME} ${SOURCE_FILES} ${GLSG_FILES})
target_link_libraries(${APP_NAME} Qt5::Quick geGL AssimpModelLoader QtImageLoader)
target_include_directories(${APP_NAME} PUBLIC "src/")
set_target_properties(${APP_NAME} PROPERTIES COMPILE_DEFINITIONS "APP_RESOURCES=\"${${APP_NAME}_RESOURCES}\"")
set_property(TARGET ${APP_NAME} PROPERTY FOLDER "${examples_folder_name}")